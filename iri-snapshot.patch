diff --git a/src/main/java/com/iota/iri/Snapshot.java b/src/main/java/com/iota/iri/Snapshot.java
index eb408c63..d1bf69cb 100644
--- a/src/main/java/com/iota/iri/Snapshot.java
+++ b/src/main/java/com/iota/iri/Snapshot.java
@@ -47,39 +47,39 @@ public class Snapshot {
                     initialState.put(new Hash(key), Long.valueOf(value));
                 }
             }
-            { // Check snapshot signature
-                trits = new int[Curl.HASH_LENGTH];
-                curl.squeeze(trits, 0, Curl.HASH_LENGTH);
-                SpongeFactory.Mode mode = SpongeFactory.Mode.CURLP81;
-                int[] digests = new int[0];
-                int[] bundle = ISS.normalizedBundle(trits);
-                int[] root;
-                int i;
-                in = Snapshot.class.getResourceAsStream("/Snapshot.sig");
-                reader = new BufferedReader(new InputStreamReader(in));
-                for(i = 0; i < 3 && (line = reader.readLine()) != null; i++) {
-                    int[] lineTrits = Converter.allocateTritsForTrytes(line.length());
-                    Converter.trits(line, lineTrits, 0);
-                    digests = ArrayUtils.addAll(
-                            digests,
-                            ISS.digest(mode
-                                    , Arrays.copyOfRange(bundle, i*ISS.NORMALIZED_FRAGMENT_LENGTH, (i+1)*ISS.NORMALIZED_FRAGMENT_LENGTH)
-                                    , lineTrits));
-                }
-                if((line = reader.readLine()) != null) {
-                    int[] lineTrits = Converter.allocateTritsForTrytes(line.length());
-                    Converter.trits(line, lineTrits, 0);
-                    root = ISS.getMerkleRoot(mode, ISS.address(mode, digests), lineTrits, 0, SNAPSHOT_INDEX, SNAPSHOT_PUBKEY_DEPTH);
-                } else {
-                    root = ISS.address(mode, digests);
-                }
-
-                int[] pubkeyTrits = Converter.allocateTritsForTrytes(SNAPSHOT_PUBKEY.length());
-                Converter.trits(SNAPSHOT_PUBKEY, pubkeyTrits, 0);
-                if(!Arrays.equals(pubkeyTrits, root)) {
-                    throw new RuntimeException("Snapshot signature failed.");
-                }
-            }
+            // { // Check snapshot signature
+            //     trits = new int[Curl.HASH_LENGTH];
+            //     curl.squeeze(trits, 0, Curl.HASH_LENGTH);
+            //     SpongeFactory.Mode mode = SpongeFactory.Mode.CURLP81;
+            //     int[] digests = new int[0];
+            //     int[] bundle = ISS.normalizedBundle(trits);
+            //     int[] root;
+            //     int i;
+            //     in = Snapshot.class.getResourceAsStream("/Snapshot.sig");
+            //     reader = new BufferedReader(new InputStreamReader(in));
+            //     for(i = 0; i < 3 && (line = reader.readLine()) != null; i++) {
+            //         int[] lineTrits = Converter.allocateTritsForTrytes(line.length());
+            //         Converter.trits(line, lineTrits, 0);
+            //         digests = ArrayUtils.addAll(
+            //                 digests,
+            //                 ISS.digest(mode
+            //                         , Arrays.copyOfRange(bundle, i*ISS.NORMALIZED_FRAGMENT_LENGTH, (i+1)*ISS.NORMALIZED_FRAGMENT_LENGTH)
+            //                         , lineTrits));
+            //     }
+            //     if((line = reader.readLine()) != null) {
+            //         int[] lineTrits = Converter.allocateTritsForTrytes(line.length());
+            //         Converter.trits(line, lineTrits, 0);
+            //         root = ISS.getMerkleRoot(mode, ISS.address(mode, digests), lineTrits, 0, SNAPSHOT_INDEX, SNAPSHOT_PUBKEY_DEPTH);
+            //     } else {
+            //         root = ISS.address(mode, digests);
+            //     }
+
+            //     int[] pubkeyTrits = Converter.allocateTritsForTrytes(SNAPSHOT_PUBKEY.length());
+            //     Converter.trits(SNAPSHOT_PUBKEY, pubkeyTrits, 0);
+            //     if(!Arrays.equals(pubkeyTrits, root)) {
+            //         throw new RuntimeException("Snapshot signature failed.");
+            //     }
+            // }
         } catch (IOException e) {
             System.out.println("Failed to load snapshot.");
             System.exit(-1);
